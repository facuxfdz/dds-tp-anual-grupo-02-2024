// <auto-generated />
using System;
using AccesoAlimentario.Core.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccesoAlimentario.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Autorizaciones.AccesoHeladera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AutorizacionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaAcceso")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("HeladeraId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TarjetaId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TipoAcceso")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutorizacionId");

                    b.HasIndex("HeladeraId");

                    b.HasIndex("TarjetaId");

                    b.ToTable("AccesosHeladera");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Autorizaciones.AutorizacionManipulacionHeladera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("HeladeraId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TarjetaAutorizadaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("HeladeraId");

                    b.HasIndex("TarjetaAutorizadaId");

                    b.ToTable("AutorizacionesManipulacionHeladera");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.FormaContribucion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ColaboradorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaContribucion")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradorId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Direcciones.Direccion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Departamento")
                        .HasColumnType("longtext");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Piso")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.DocumentosIdentidad.DocumentoIdentidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NroDocumento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DocumentosIdentidad");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.Heladera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInstalacion")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModeloId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PuntoEstrategicoId")
                        .HasColumnType("char(36)");

                    b.Property<float>("TemperaturaActual")
                        .HasColumnType("float");

                    b.Property<float>("TemperaturaMaximaConfig")
                        .HasColumnType("float");

                    b.Property<float>("TemperaturaMinimaConfig")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ModeloId");

                    b.HasIndex("PuntoEstrategicoId");

                    b.ToTable("Heladeras");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.ModeloHeladera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<int>("TemperaturaMaxima")
                        .HasColumnType("int");

                    b.Property<int>("TemperaturaMinima")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ModelosHeladera");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.PuntoEstrategico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DireccionId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Latitud")
                        .HasColumnType("float");

                    b.Property<float>("Longitud")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DireccionId");

                    b.ToTable("PuntosEstrategicos");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.Vianda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccesoHeladeraId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Calorias")
                        .HasColumnType("float");

                    b.Property<Guid>("ColaboradorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comida")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCaducidad")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaDonacion")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("HeladeraId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Peso")
                        .HasColumnType("float");

                    b.Property<Guid>("UnidadEstandarId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccesoHeladeraId");

                    b.HasIndex("ColaboradorId");

                    b.HasIndex("HeladeraId");

                    b.HasIndex("UnidadEstandarId");

                    b.ToTable("Viandas");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.ViandaEstandar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("Ancho")
                        .HasColumnType("float");

                    b.Property<float>("Largo")
                        .HasColumnType("float");

                    b.Property<float>("Profundidad")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ViandasEstandar");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Incidentes.Incidente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminador")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("HeladeraId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Resuelto")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("HeladeraId");

                    b.ToTable("Incidentes");

                    b.HasDiscriminator<string>("Discriminador").HasValue("Incidente");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Incidentes.VisitaTecnica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comentario")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("IncidenteId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TecnicoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("IncidenteId");

                    b.HasIndex("TecnicoId");

                    b.ToTable("VisitasTecnicas");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.MediosContacto.MedioContacto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminador")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<Guid?>("PersonaId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Preferida")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("MediosContacto");

                    b.HasDiscriminator<string>("Discriminador").HasValue("MedioContacto");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Notificaciones.Notificacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Asunto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<Guid?>("MedioContactoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SuscripcionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MedioContactoId");

                    b.HasIndex("SuscripcionId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Personas.Persona", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DireccionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminador")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<Guid?>("DocumentoIdentidadId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DireccionId");

                    b.HasIndex("DocumentoIdentidadId");

                    b.ToTable("Personas");

                    b.HasDiscriminator<string>("Discriminador").HasValue("Persona");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Premios.Premio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaReclamo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("PuntosNecesarios")
                        .HasColumnType("float");

                    b.Property<Guid?>("ReclamadoPorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rubro")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReclamadoPorId");

                    b.ToTable("Premios");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Reportes.Reporte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Cuerpo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reportes");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.AreaCobertura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("Latitud")
                        .HasColumnType("float");

                    b.Property<float>("Longitud")
                        .HasColumnType("float");

                    b.Property<float>("Radio")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AreasCobertura");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.RegistroMovimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Movimiento")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("SensorMovimientoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SensorMovimientoId");

                    b.ToTable("RegistrosMovimiento");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.RegistroTemperatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SensorTemperaturaId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Temperatura")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SensorTemperaturaId");

                    b.ToTable("RegistrosTemperatura");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("HeladeraId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("HeladeraId");

                    b.ToTable("Sensores");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.Suscripcion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ColaboradorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminador")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<Guid>("HeladeraId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradorId");

                    b.HasIndex("HeladeraId");

                    b.ToTable("Suscripciones");

                    b.HasDiscriminator<string>("Discriminador").HasValue("Suscripcion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Tarjetas.Tarjeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminador")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<Guid>("PropietarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PropietarioId");

                    b.ToTable("Tarjetas");

                    b.HasDiscriminator<string>("Discriminador").HasValue("Tarjeta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.AdministracionHeladera", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Contribuciones.FormaContribucion");

                    b.Property<Guid>("HeladeraId")
                        .HasColumnType("char(36)");

                    b.HasIndex("HeladeraId");

                    b.ToTable("AdministracionesHeladera", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.DistribucionViandas", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Contribuciones.FormaContribucion");

                    b.Property<int>("CantViandas")
                        .HasColumnType("int");

                    b.Property<Guid?>("HeladeraDestinoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("HeladeraOrigenId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MotivoDistribucion")
                        .HasColumnType("int");

                    b.HasIndex("HeladeraDestinoId");

                    b.HasIndex("HeladeraOrigenId");

                    b.ToTable("DistribucionesViandas", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.DonacionMonetaria", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Contribuciones.FormaContribucion");

                    b.Property<int>("FrecuenciaDias")
                        .HasColumnType("int");

                    b.Property<float>("Monto")
                        .HasColumnType("float");

                    b.ToTable("DonacionesMonetarias", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.DonacionVianda", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Contribuciones.FormaContribucion");

                    b.Property<Guid?>("HeladeraId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ViandaId")
                        .HasColumnType("char(36)");

                    b.HasIndex("HeladeraId");

                    b.HasIndex("ViandaId");

                    b.ToTable("DonacionesViandas", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.OfertaPremio", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Contribuciones.FormaContribucion");

                    b.Property<Guid>("PremioId")
                        .HasColumnType("char(36)");

                    b.HasIndex("PremioId");

                    b.ToTable("OfertasPremios", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.RegistroPersonaVulnerable", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Contribuciones.FormaContribucion");

                    b.Property<Guid?>("TarjetaId")
                        .HasColumnType("char(36)");

                    b.HasIndex("TarjetaId");

                    b.ToTable("RegistrosPersonasVulnerables", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Incidentes.Alerta", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Incidentes.Incidente");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Alerta");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Incidentes.FallaTecnica", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Incidentes.Incidente");

                    b.Property<Guid>("ColaboradorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.HasIndex("ColaboradorId");

                    b.HasDiscriminator().HasValue("FallaTecnica");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.MediosContacto.Email", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.MediosContacto.MedioContacto");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Email");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.MediosContacto.Telefono", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.MediosContacto.MedioContacto");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Telefono");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.MediosContacto.Whatsapp", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.MediosContacto.MedioContacto");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("MediosContacto", t =>
                        {
                            t.Property("Numero")
                                .HasColumnName("Whatsapp_Numero");
                        });

                    b.HasDiscriminator().HasValue("Whatsapp");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Personas.PersonaHumana", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Personas.Persona");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Sexo")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Humana");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Personas.PersonaJuridica", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Personas.Persona");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rubro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Juridica");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.Colaborador", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Roles.Rol");

                    b.Property<string>("ContribucionesPreferidas")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Puntos")
                        .HasColumnType("float");

                    b.Property<Guid?>("TarjetaColaboracionId")
                        .HasColumnType("char(36)");

                    b.HasIndex("TarjetaColaboracionId");

                    b.ToTable("Colaboradores", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.PersonaVulnerable", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Roles.Rol");

                    b.Property<int>("CantidadDeMenores")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistroSistema")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TarjetaId")
                        .HasColumnType("char(36)");

                    b.HasIndex("TarjetaId");

                    b.ToTable("PersonasVulnerables", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.Tecnico", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Roles.Rol");

                    b.Property<Guid>("AreaCoberturaId")
                        .HasColumnType("char(36)");

                    b.HasIndex("AreaCoberturaId");

                    b.ToTable("Tecnicos", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.UsuarioSistema", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Roles.Rol");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<int>("RegisterType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("UsuariosSistema", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.SensorMovimiento", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Sensores.Sensor");

                    b.ToTable("SensoresMovimiento", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.SensorTemperatura", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Sensores.Sensor");

                    b.ToTable("SensoresTemperatura", (string)null);
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.SuscripcionExcedenteViandas", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.Suscripcion");

                    b.Property<int>("Maximo")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ExcedenteViandas");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.SuscripcionFaltanteViandas", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.Suscripcion");

                    b.Property<int>("Minimo")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("FaltanteViandas");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.SuscripcionIncidenteHeladera", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.Suscripcion");

                    b.HasDiscriminator().HasValue("IncidenteHeladera");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Tarjetas.TarjetaColaboracion", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Tarjetas.Tarjeta");

                    b.HasDiscriminator().HasValue("Colaboracion");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Tarjetas.TarjetaConsumo", b =>
                {
                    b.HasBaseType("AccesoAlimentario.Core.Entities.Tarjetas.Tarjeta");

                    b.Property<Guid?>("ResponsableId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ResponsableId");

                    b.HasDiscriminator().HasValue("Consumo");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Autorizaciones.AccesoHeladera", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Autorizaciones.AutorizacionManipulacionHeladera", "Autorizacion")
                        .WithMany()
                        .HasForeignKey("AutorizacionId");

                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "Heladera")
                        .WithMany("Accesos")
                        .HasForeignKey("HeladeraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccesoAlimentario.Core.Entities.Tarjetas.Tarjeta", "Tarjeta")
                        .WithMany("Accesos")
                        .HasForeignKey("TarjetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autorizacion");

                    b.Navigation("Heladera");

                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Autorizaciones.AutorizacionManipulacionHeladera", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "Heladera")
                        .WithMany()
                        .HasForeignKey("HeladeraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccesoAlimentario.Core.Entities.Tarjetas.TarjetaColaboracion", "TarjetaAutorizada")
                        .WithMany("Autorizaciones")
                        .HasForeignKey("TarjetaAutorizadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Heladera");

                    b.Navigation("TarjetaAutorizada");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.FormaContribucion", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.Colaborador", null)
                        .WithMany("ContribucionesRealizadas")
                        .HasForeignKey("ColaboradorId");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.Heladera", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.ModeloHeladera", "Modelo")
                        .WithMany()
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.PuntoEstrategico", "PuntoEstrategico")
                        .WithMany()
                        .HasForeignKey("PuntoEstrategicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");

                    b.Navigation("PuntoEstrategico");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.PuntoEstrategico", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Direcciones.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("DireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.Vianda", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Autorizaciones.AccesoHeladera", null)
                        .WithMany("Viandas")
                        .HasForeignKey("AccesoHeladeraId");

                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.Colaborador", "Colaborador")
                        .WithMany()
                        .HasForeignKey("ColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "Heladera")
                        .WithMany("Viandas")
                        .HasForeignKey("HeladeraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.ViandaEstandar", "UnidadEstandar")
                        .WithMany()
                        .HasForeignKey("UnidadEstandarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colaborador");

                    b.Navigation("Heladera");

                    b.Navigation("UnidadEstandar");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Incidentes.Incidente", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", null)
                        .WithMany("Incidentes")
                        .HasForeignKey("HeladeraId");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Incidentes.VisitaTecnica", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Incidentes.Incidente", null)
                        .WithMany("VisitasTecnicas")
                        .HasForeignKey("IncidenteId");

                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.Tecnico", "Tecnico")
                        .WithMany()
                        .HasForeignKey("TecnicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tecnico");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.MediosContacto.MedioContacto", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Personas.Persona", null)
                        .WithMany("MediosDeContacto")
                        .HasForeignKey("PersonaId");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Notificaciones.Notificacion", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.MediosContacto.MedioContacto", null)
                        .WithMany("Historial")
                        .HasForeignKey("MedioContactoId");

                    b.HasOne("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.Suscripcion", null)
                        .WithMany("Historial")
                        .HasForeignKey("SuscripcionId");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Personas.Persona", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Direcciones.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("DireccionId");

                    b.HasOne("AccesoAlimentario.Core.Entities.DocumentosIdentidad.DocumentoIdentidad", "DocumentoIdentidad")
                        .WithMany()
                        .HasForeignKey("DocumentoIdentidadId");

                    b.Navigation("Direccion");

                    b.Navigation("DocumentoIdentidad");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Premios.Premio", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.Colaborador", "ReclamadoPor")
                        .WithMany("PremiosReclamados")
                        .HasForeignKey("ReclamadoPorId");

                    b.Navigation("ReclamadoPor");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.Rol", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Personas.Persona", "Persona")
                        .WithMany("Roles")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.RegistroMovimiento", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Sensores.SensorMovimiento", null)
                        .WithMany("RegistrosMovimiento")
                        .HasForeignKey("SensorMovimientoId");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.RegistroTemperatura", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Sensores.SensorTemperatura", null)
                        .WithMany("RegistrosTemperatura")
                        .HasForeignKey("SensorTemperaturaId");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.Sensor", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "Heladera")
                        .WithMany("Sensores")
                        .HasForeignKey("HeladeraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Heladera");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.Suscripcion", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.Colaborador", "Colaborador")
                        .WithMany("Suscripciones")
                        .HasForeignKey("ColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "Heladera")
                        .WithMany("Suscripciones")
                        .HasForeignKey("HeladeraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colaborador");

                    b.Navigation("Heladera");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Tarjetas.Tarjeta", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.Rol", "Propietario")
                        .WithMany()
                        .HasForeignKey("PropietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propietario");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.AdministracionHeladera", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "Heladera")
                        .WithMany()
                        .HasForeignKey("HeladeraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Heladera");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.DistribucionViandas", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "HeladeraDestino")
                        .WithMany()
                        .HasForeignKey("HeladeraDestinoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "HeladeraOrigen")
                        .WithMany()
                        .HasForeignKey("HeladeraOrigenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HeladeraDestino");

                    b.Navigation("HeladeraOrigen");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.DonacionVianda", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Heladera", "Heladera")
                        .WithMany()
                        .HasForeignKey("HeladeraId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AccesoAlimentario.Core.Entities.Heladeras.Vianda", "Vianda")
                        .WithMany()
                        .HasForeignKey("ViandaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Heladera");

                    b.Navigation("Vianda");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.OfertaPremio", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Premios.Premio", "Premio")
                        .WithMany()
                        .HasForeignKey("PremioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Premio");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Contribuciones.RegistroPersonaVulnerable", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Tarjetas.TarjetaConsumo", "Tarjeta")
                        .WithMany()
                        .HasForeignKey("TarjetaId");

                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Incidentes.FallaTecnica", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.Colaborador", "Colaborador")
                        .WithMany()
                        .HasForeignKey("ColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colaborador");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.Colaborador", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Tarjetas.TarjetaColaboracion", "TarjetaColaboracion")
                        .WithMany()
                        .HasForeignKey("TarjetaColaboracionId");

                    b.Navigation("TarjetaColaboracion");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.PersonaVulnerable", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Tarjetas.TarjetaConsumo", "Tarjeta")
                        .WithMany()
                        .HasForeignKey("TarjetaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tarjeta");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.Tecnico", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.AreaCobertura", "AreaCobertura")
                        .WithMany()
                        .HasForeignKey("AreaCoberturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaCobertura");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.SensorMovimiento", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Sensores.Sensor", null)
                        .WithOne()
                        .HasForeignKey("AccesoAlimentario.Core.Entities.Sensores.SensorMovimiento", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.SensorTemperatura", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Sensores.Sensor", null)
                        .WithOne()
                        .HasForeignKey("AccesoAlimentario.Core.Entities.Sensores.SensorTemperatura", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Tarjetas.TarjetaConsumo", b =>
                {
                    b.HasOne("AccesoAlimentario.Core.Entities.Roles.Colaborador", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId");

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Autorizaciones.AccesoHeladera", b =>
                {
                    b.Navigation("Viandas");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Heladeras.Heladera", b =>
                {
                    b.Navigation("Accesos");

                    b.Navigation("Incidentes");

                    b.Navigation("Sensores");

                    b.Navigation("Suscripciones");

                    b.Navigation("Viandas");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Incidentes.Incidente", b =>
                {
                    b.Navigation("VisitasTecnicas");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.MediosContacto.MedioContacto", b =>
                {
                    b.Navigation("Historial");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Personas.Persona", b =>
                {
                    b.Navigation("MediosDeContacto");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.SuscripcionesColaboradores.Suscripcion", b =>
                {
                    b.Navigation("Historial");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Tarjetas.Tarjeta", b =>
                {
                    b.Navigation("Accesos");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Roles.Colaborador", b =>
                {
                    b.Navigation("ContribucionesRealizadas");

                    b.Navigation("PremiosReclamados");

                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.SensorMovimiento", b =>
                {
                    b.Navigation("RegistrosMovimiento");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Sensores.SensorTemperatura", b =>
                {
                    b.Navigation("RegistrosTemperatura");
                });

            modelBuilder.Entity("AccesoAlimentario.Core.Entities.Tarjetas.TarjetaColaboracion", b =>
                {
                    b.Navigation("Autorizaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
