name: Destroy
run-name: ${{ github.event.head_commit.message }}

on: [workflow_dispatch]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  
env:
  backend_s3_bucket: "acceso-alimentario"
  backend_dynamodb_table: "acceso-alimentario-terraform-state-lock"
  repo_name: "acceso-alimentario/releases"
  vpc_name: "acceso-alimentario"
  domain_record: "acceso-alimentario.opsconsultingservices.com"
  ECS_TASK_DEFINITION: "deployment/task_def.json"
  alb_name: "acceso-alimentario"

jobs:  
  destroy_infrastructure:
    runs-on: ubuntu-22.04
    if: github.event_name == 'workflow_dispatch' # Ensures it only runs manually
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
  
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034781041905:role/GhActionsRunner
          role-session-name: ${{ github.actor }}-session
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      
      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${{ env.repo_name }}"
          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV
          
      - name: TF init
        shell: bash
        run: |
          set -eux
          modules=(ecr vpc alb ecs rds bastion)
          
          for module in "${modules[@]}"; do
            echo "module: $module" 
            cd $module 
            terraform init -upgrade -migrate-state \
              -backend-config='skip_metadata_api_check=true' \
              -backend-config='skip_region_validation=true' \
              -backend-config='skip_credentials_validation=true' \
              -backend-config='region=${{ secrets.AWS_REGION }}' \
              -backend-config='bucket=${{ env.backend_s3_bucket }}' \
              -backend-config="key=$module/terraform-${{ env.ECR_REPO_NAME }}.tfstate" \
              -backend-config='dynamodb_table=${{ env.backend_dynamodb_table }}'
            cd ..
          done            
        working-directory: "./deployment"
      
      - name: Login to ECR      
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}          

      - name: Pre-destroy cleanup
        shell: bash
        run: |
          set -eux
          # Delete all images in the ECR repository
          export AWS_REGION="us-east-1"
          repos=(acceso-alimentario_releases acceso-alimentario_releases/front acceso-alimentario_releases/recomendaciones-api)
          for repo in "${repos[@]}"; do
            echo "Deleting images in $repo"
            aws ecr list-images --repository-name $repo --query 'imageIds[*]' --output json | jq
            aws ecr batch-delete-image --repository-name $repo --image-ids "$(aws ecr list-images --repository-name $repo --query 'imageIds[*]' --output json)" || true
          done
        working-directory: "./deployment"
 
      - name: Destroy Infrastructure [TF Destroy]
        shell: bash
        run: |
          set -eux
          modules=(rds ecs alb bastion vpc ecr)
          
          for module in "${modules[@]}"; do
            echo "module: $module" 
            cd $module 
            terraform destroy -var-file="prod.tfvars" -auto-approve
            cd ..
          done            
        working-directory: "./deployment"