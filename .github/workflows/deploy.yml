name: Deployment
run-name: ${{ github.event.head_commit.message }}

on:
  push:
    branches:
      - master

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

env:
  backend_s3_bucket: "acceso-alimentario"
  backend_dynamodb_table: "acceso-alimentario-terraform-state-lock"
  repo_name: "acceso-alimentario/releases"
  vpc_name: "acceso-alimentario"
  domain_record: "acceso-alimentario.opsconsultingservices.com"
  ECS_TASK_DEFINITION: "deployment/task_def.json"
  alb_name: "acceso-alimentario"
  
jobs:
  build_and_deploy:
    runs-on: ubuntu-22.04
    if: github.event_name == 'workflow_dispatch' # Ensures it only runs manually
    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}
    steps:
      
      - name: Clone the repository
        uses: actions/checkout@v4

      
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::034781041905:role/GhActionsRunner
          role-session-name: ${{ github.actor }}-session
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          
      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${{ env.repo_name }}"
          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: TF init
        shell: bash
        run: |
          set -eux
          modules=(ecr vpc alb ecs rds bastion outputs)

          for module in "${modules[@]}"; do
            echo "module: $module" 
            cd $module 
            terraform init -upgrade -migrate-state \
              -backend-config='skip_metadata_api_check=true' \
              -backend-config='skip_region_validation=true' \
              -backend-config='skip_credentials_validation=true' \
              -backend-config='region=${{ secrets.AWS_REGION }}' \
              -backend-config='bucket=${{ env.backend_s3_bucket }}' \
              -backend-config="key=$module/terraform-${{ env.ECR_REPO_NAME }}.tfstate" \
              -backend-config='dynamodb_table=${{ env.backend_dynamodb_table }}'
            cd ..
          done            
        working-directory: "./deployment"

      - name: Create Resources [TF Apply]
        shell: bash
        run: |
          set -eux
          modules=(ecr vpc alb ecs rds bastion outputs)

          for module in "${modules[@]}"; do
            echo "module: $module" 
            cd $module 
            terraform apply -var-file="prod.tfvars" -auto-approve
            cd ..
          done
        working-directory: "./deployment"

#      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash        
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build "." -f "./Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG"           
          echo "BACK_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "BACK_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          
      - name: Build, tag, and push frontend to Amazon ECR
        id: build-publish-frontend
        shell: bash        
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build "." --build-arg NEXT_PUBLIC_API_URL="back.acceso-alimentario.opsconsultingservices.com" -f "./Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY/front:$IMAGE_TAG" 
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY/front:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY/front"
          echo "image_tag_front=$IMAGE_TAG"           
          echo "FRONT_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY/front:$IMAGE_TAG"
          echo "FRONT_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY/front:$IMAGE_TAG" >> $GITHUB_ENV
        working-directory: "./AccesoAlimentario.Frontend"
        
      - name: Build, tag, and push recomendaciones-api to Amazon ECR
        id: build-publish-recomendaciones-api
        shell: bash        
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build "." -f "./Dockerfile" -t "$ECR_REGISTRY/$ECR_REPOSITORY/recomendaciones-api:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY/recomendaciones-api:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY/recomendaciones-api"
          echo "image_tag_recomendaciones-api=$IMAGE_TAG"           
          echo "RECOMENDACIONES_API_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY/recomendaciones-api:$IMAGE_TAG"
          echo "RECOMENDACIONES_API_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY/recomendaciones-api:$IMAGE_TAG" >> $GITHUB_ENV
        working-directory: "./ServicioRecomendaciones"
        
      - name: Update ECS Task Definition
        id: update-task-def
        run: |
          pip install boto3
          python3 update_task_def.py
        env:
          ECS_TASK_DEFINITION: ${{ env.ECS_TASK_DEFINITION }}
          BACK_IMAGE: ${{ env.BACK_IMAGE }}
          FRONT_IMAGE: ${{ env.FRONT_IMAGE }}
          RECOMENDACIONES_API_IMAGE: ${{ env.RECOMENDACIONES_API_IMAGE }}
        working-directory: "./deployment"
